// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(100)
  email       String    @unique @db.VarChar(100)
  password    String    @db.VarChar(255)
  role        String    @db.VarChar(50)
	phoneNumber   String    @db.VarChar(15) @map("phone_number")
  isVerified  Boolean   @default(false) @map("is_verified")
  isApproved  Boolean   @default(false) @map("is_approved")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  avatarPath  String?   @db.VarChar(100) @map("avatar_path")
  fcmToken    String?    @db.VarChar(255)

  // relation

  hostess     Hostess?
  performer   Performer?

}

model Hostess {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique @map("user_id")
  totalCount      Int      @default(0) @map("total_count")
  acceptedCount   Int      @default(0) @map("accepted_count")
  completedCount  Int      @default(0) @map("completed_count")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id])
  lead            Lead[]
}

model Performer {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique @map("user_id")
  available       Boolean   @default(true)
  assignedCount   Int       @default(0) @map("assigned_count")
  acceptedCount   Int       @default(0) @map("accepted_count")
  closedCount     Int       @default(0) @map("closed_count")
  completedCount  Int       @default(0) @map("completed_count")
  skippedCount    Int       @default(0) @map("skipped_count")
  avgResponseTime Float     @default(0) @map("avg_response_time")
  score           Float     @default(0)
  groupId         Int?      @map("group_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id])
  group           Group?    @relation(fields: [groupId], references: [id])
}

model Lead {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  registerId    String    @unique  @map("register_id")
  phoneNumber   String    @db.VarChar(15) @map("phone_number")
  interestId    Int       @map("interest_id")
  additionalInfo Json?    @map("additional_info") @db.JsonB
  addedBy       Int      @map("added_by")
  status        String    @default("assigned") @db.VarChar(20)
  assignedTo    Int?      @map("assigned_to")
  assignedAt    DateTime? @map("assigned_at")
  acceptedBy    Int?      @map("accepted_by")
  acceptedAt    DateTime? @map("accepted_at")
  stageId       Int  			@map("stage_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  triedPerformerIds  Int[]  @map("tired_performer_ids")
  interest      Interest  @relation(fields: [interestId], references: [id])
  hostess       Hostess   @relation(fields: [addedBy], references: [id])
 
}

model Stage {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(100)
	description    String   @db.VarChar(256)
  sequence       Int
  requiredFields Json?  @map("required_fields") @db.JsonB
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
}

model lead_stage_mapping {
  id           Int       @id @default(autoincrement())
  leadId       Int       @map("lead_id")
  stageId      Int       @map("stage_id")
  currentValue Json?	   @map("current_value") @db.JsonB
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
}

model Interest {
  id        Int                      @id @default(autoincrement())
  name      String                   @unique @db.VarChar(100)
  createdAt DateTime                 @default(now()) @map("created_at")
  updatedAt DateTime                 @default(now()) @updatedAt @map("updated_at")
  leads     Lead[]
}

model Group {
  id        Int                      @id @default(autoincrement())
  name      String                   @unique @db.VarChar(100)
  createdAt DateTime                 @default(now()) @map("created_at")
  updatedAt DateTime                 @default(now()) @updatedAt @map("updated_at")
  performers Performer[]
}

model InterestGroupMapping {
  id         Int      @id @default(autoincrement())
  interestId Int      @map("interest_id")
  groupId    Int      @map("group_id")
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([interestId, groupId])
}

model PerformerGroupMapping {
  id          Int      @id @default(autoincrement())
  performerId Int      @map("performer_id")
  groupId     Int      @map("group_id")
  createdAt   DateTime @default(now()) @map("created_at")
  @@unique([performerId, groupId])
}

model Setting {
  id          Int      @id @default(autoincrement())
  assignPeriod Int      @default(0) @map("assign_period")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
}

model Otp {
  id        String   @id @default(cuid())
  email     String?
  phone     String?
  code      String
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model LeadInputSetting {
  id          Int      @id @default(autoincrement())
  sequence    Int
  label       String   @unique
  type        String
	required    Boolean   @default(false)
  items       String[]
}

model Notification {
  id              Int       @id @default(autoincrement())
  receiveId       Int       @map("receive_id")
  title           String
  message         String
  createdAt       DateTime @default(now())  @map("created_at")
  isRead          Boolean  @default(false)  @map("is_read")
}
